<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Configuration</name>
    </assembly>
    <members>
        <member name="T:Penguin.Configuration.ConfigurationProviderList">
            <summary>
            Concats an ordered list of configuration providers into a single configuration provider with precidence determined by the order the children are sorted in when constructing
            </summary>
        </member>
        <member name="P:Penguin.Configuration.ConfigurationProviderList.AllConfigurations">
            <summary>
            Returns a dictionary representing all distinct configurations with value determined by child order
            </summary>
        </member>
        <member name="P:Penguin.Configuration.ConfigurationProviderList.AllConnectionStrings">
            <summary>
            Returns a dictionary representing all distinct connection strings with value determined by child order
            </summary>
        </member>
        <member name="P:Penguin.Configuration.ConfigurationProviderList.Providers">
            <summary>
            The child configurations used when constructing this instance
            </summary>
        </member>
        <member name="M:Penguin.Configuration.ConfigurationProviderList.#ctor(Penguin.Configuration.Abstractions.IProvideConfigurations[])">
            <summary>
            Constructs a new instance of this configuration provider
            </summary>
            <param name="providers">An ordered list of children to use when constructing this object, with the most important first</param>
        </member>
        <member name="M:Penguin.Configuration.ConfigurationProviderList.GetConfiguration(System.String)">
            <summary>
            Returns the first non-null value of a configuration from the list of children
            </summary>
            <param name="Key">The key of the configuration to use</param>
            <returns>The value of the configuration</returns>
        </member>
        <member name="M:Penguin.Configuration.ConfigurationProviderList.GetConnectionString(System.String)">
            <summary>
            Returns the first non-null value of a connection string from the list of children
            </summary>
            <param name="ConnectionStringName">The name of the connection string to return</param>
            <returns>The value of the connection string</returns>
        </member>
        <member name="P:Penguin.Configuration.DictionaryProvider.AllConfigurations">
            <summary>
            The underlying configuration source
            </summary>
        </member>
        <member name="P:Penguin.Configuration.DictionaryProvider.AllConnectionStrings">
            <summary>
            The underlying connection string source
            </summary>
        </member>
        <member name="P:Penguin.Configuration.DictionaryProvider.ErrorOnMissingKey">
            <summary>
            If true, will throw an error instead of returning null on a missing key
            </summary>
        </member>
        <member name="M:Penguin.Configuration.DictionaryProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            A configuration provider that uses dictionaries as the data source for configurations and connection strings
            </summary>
            <param name="Configurations">The dictionary to use for configurations</param>
            <param name="ConnectionStrings">The optional dictionary to use for connection strings</param>
            <param name="errorOnMissingKey">If true, will throw an error instead of returning null on a missing key</param>
        </member>
        <member name="M:Penguin.Configuration.DictionaryProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            A configuration provider that uses dictionaries as the data source for configurations and connection strings
            </summary>
            <param name="Configurations">The dictionary to use for configurations</param>
            <param name="errorOnMissingKey">If true, will throw an error instead of returning null on a missing key</param>
        </member>
        <member name="M:Penguin.Configuration.DictionaryProvider.GetConfiguration(System.String)">
            <summary>
            Gets a configuration from the underlying data store
            </summary>
            <param name="Key">The configuration key</param>
            <returns>The configuration value</returns>
        </member>
        <member name="M:Penguin.Configuration.DictionaryProvider.GetConnectionString(System.String)">
            <summary>
            Gets a connection string from the underlying data store
            </summary>
            <param name="Name">The connection string name</param>
            <returns>The connection string value value</returns>
        </member>
        <member name="T:Penguin.Configuration.JsonProvider">
            <summary>
            Provides configurations from the Microsoft IConfiguration class used by .net core applications
            </summary>
        </member>
        <member name="P:Penguin.Configuration.JsonProvider.AllConfigurations">
            <summary>
            Returns a dictionary of all configuraitons found in the IConfiguration
            </summary>
        </member>
        <member name="P:Penguin.Configuration.JsonProvider.AllConnectionStrings">
            <summary>
            Returns a dictionary of all connection strings found in the IConfiguration
            </summary>
        </member>
        <member name="P:Penguin.Configuration.JsonProvider.AppSettingsSectionName">
            <summary>
            The name of the json section to use for application settings
            </summary>
        </member>
        <member name="P:Penguin.Configuration.JsonProvider.Configuration">
            <summary>
            The IConfiguration used when creating this provider
            </summary>
        </member>
        <member name="P:Penguin.Configuration.JsonProvider.ConnectionStringsSectionName">
            <summary>
            The name of the json section to use for connection strings
            </summary>
        </member>
        <member name="M:Penguin.Configuration.JsonProvider.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Creates a new instance of this configuration provider
            </summary>
            <param name="provider">The IConfiguration to wrap</param>
            <param name="appSettingsSectionName">The json name of the default application settings section</param>
        </member>
        <member name="M:Penguin.Configuration.JsonProvider.GetConfiguration(System.String)">
            <summary>
            Returns the value of a configuration
            </summary>
            <param name="Key">The key of the configuration to get</param>
            <returns>The value (or null) of the requested configuration</returns>
        </member>
        <member name="M:Penguin.Configuration.JsonProvider.GetConnectionString(System.String)">
            <summary>
            Returns a connection string from the connection string section
            </summary>
            <param name="Name">The name of the connection string to get</param>
            <returns>The value (or null) of the requested connection string</returns>
        </member>
        <member name="T:Penguin.Configuration.XmlProvider">
            <summary>
            Provides access to a web.config or app.config file for configurations
            </summary>
        </member>
        <member name="P:Penguin.Configuration.XmlProvider.AllConfigurations">
            <summary>
            returns a dictionary of all configurations found in this file
            </summary>
        </member>
        <member name="P:Penguin.Configuration.XmlProvider.AllConnectionStrings">
            <summary>
            returns a list of all connection strings found in this file
            </summary>
        </member>
        <member name="M:Penguin.Configuration.XmlProvider.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of this provider
            </summary>
            <param name="Path">The path to the .config</param>
            <param name="Required">if true, will error if the file is not found</param>
        </member>
        <member name="M:Penguin.Configuration.XmlProvider.#ctor">
            <summary>
            Creates a new instance of this provider allowing access through ConfigurationManager
            </summary>
        </member>
        <member name="M:Penguin.Configuration.XmlProvider.GetConfiguration(System.String)">
            <summary>
            Gets a configuration by the specified name
            </summary>
            <param name="Key">The name of the configuration to get</param>
            <returns>The value (or null) of the configuration</returns>
        </member>
        <member name="M:Penguin.Configuration.XmlProvider.GetConnectionString(System.String)">
            <summary>
            Gets a connection string by the specified name
            </summary>
            <param name="Name">The name of the connection string</param>
            <returns>The value (or null) of the connection string</returns>
        </member>
    </members>
</doc>
